{"version":3,"file":"webpack.js","sourceRoot":"","sources":["../../webpack/core/webpack.ts"],"names":[],"mappings":";;AAOA,qDAAiD;AAMjD,IAAI,SAAS,GAAW,CAAC,CAAC;AAE1B,MAAa,OAAO;IA+BhB,YACY,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QAEpB,SAAS,IAAI,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,WAAW,SAAS,EAAE,CAAC;QACnC,IAAI,CAAC,MAAM,GAAG,IAAI,8BAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,GAAG;QACC,OAAO;YACH,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE;YACvB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;YAC1B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE;YACvB,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;YACnC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE;YACrC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;YACzB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;YAC3B,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE;YACvC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE;YAC/B,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;YACvC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,WAAW,EAAE,IAAI,CAAC,WAAW;SAChC,CAAA;IACL,CAAC;IACD,OAAO,CAAC,IAA2C;QAC/C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;CACJ;AAzED,0BAyEC","sourcesContent":["import { BuilderContext } from '@angular-devkit/architect';\nimport { WebpackOptimization } from './webpack-Optimization';\nimport { WebpackPerformance } from './webpack-performance';\nimport { WebpackStats } from './webpack-stats';\nimport { WebpackExternals } from './webpack-externals';\nimport { WebpackResolveLoader } from './webpack-resolve-loader';\nimport { WebpackResolve } from './webpack-resolve';\nimport { WebpackModule } from './webpack-module';\nimport { WebpackOutput } from './webpack-output';\nimport { WebpackPlugin } from './webpack-plugin';\nimport { WebpackEntry } from './webpack-entry';\nimport { Configuration, Options, Node, WatchOptions } from 'webpack';\n\nlet webpackId: number = 0;\n\nexport class Webpack {\n    private mode: \"development\" | \"production\" | \"none\";\n    private name: string;\n    private context: string;\n    private devtool: Options.Devtool;\n    private target: 'web' | 'webworker' | 'node' | 'async-node' | 'node-webkit' | 'atom' | 'electron' | 'electron-renderer' | 'electron-main' | ((compiler?: any) => void);\n    private bail: boolean;\n    private profile: boolean;\n    private cache: boolean | object;\n    private watch: boolean;\n    private watchOptions: WatchOptions;\n\n    private debug: boolean;\n    private node: Node | false;\n    private amd: { [moduleName: string]: boolean };\n    private recordsPath: string;\n    private recordsInputPath: string;\n    private recordsOutputPath: string;\n    private parallelism: number;\n\n    private entry: WebpackEntry;\n    private plugin: WebpackPlugin;\n    private output: WebpackOutput;\n    private module: WebpackModule;\n    private resolve: WebpackResolve;\n    private resolveLoader: WebpackResolveLoader;\n    private externals: WebpackExternals;\n    private stats: WebpackStats;\n    private performance: WebpackPerformance;\n    private optimization: WebpackOptimization;\n\n    constructor(\n        private root: string\n    ) {\n        webpackId += 1;\n        this.name = `webpack-${webpackId}`;\n        this.module = new WebpackModule(this.root);\n    }\n\n    get(): Configuration {\n        return {\n            mode: this.mode,\n            name: this.name,\n            context: this.context,\n            entry: this.entry.get(),\n            output: this.output,\n            devtool: this.devtool,\n            plugins: this.plugin.get(),\n            stats: this.stats.get(),\n            performance: this.performance.get(),\n            optimization: this.optimization.get(),\n            module: this.module.get(),\n            resolve: this.resolve.get(),\n            resolveLoader: this.resolveLoader.get(),\n            externals: this.externals.get(),\n            target: this.target,\n            bail: this.bail,\n            profile: this.profile,\n            cache: this.cache,\n            watch: this.watch,\n            watchOptions: this.watchOptions,\n            debug: this.debug,\n            node: this.node,\n            amd: this.amd,\n            recordsPath: this.recordsPath,\n            recordsInputPath: this.recordsInputPath,\n            recordsOutputPath: this.recordsOutputPath,\n            parallelism: this.parallelism\n        }\n    }\n    setMode(mode: \"development\" | \"production\" | \"none\") {\n        this.mode = mode;\n    }\n}\n"]}